import * as NavigationBar from 'expo-navigation-bar';
import * as StatusBar from 'expo-status-bar';
import { useCallback, useEffect, useRef } from 'react';
import { AppState, AppStateStatus, BackHandler, Platform } from 'react-native';
import { useSafeAreaInsets } from 'react-native-safe-area-context';
import SystemNavigationBar from 'react-native-system-navigation-bar';

export const useImmersiveMode = () => {
  const appState = useRef(AppState.currentState);
  const isImmersiveActive = useRef(false);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è immersive —Ä–µ–∂–∏–º–∞
  const enableImmersiveMode = useCallback(async () => {
    if (Platform.OS !== 'android') return;

    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º react-native-system-navigation-bar –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
      await SystemNavigationBar.immersive();
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º expo-navigation-bar
      await NavigationBar.setVisibilityAsync('hidden');
      await NavigationBar.setBehaviorAsync('overlay-swipe');
      await NavigationBar.setBackgroundColorAsync('#00000000');
      
      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –±–∞—Ä
      StatusBar.setStatusBarStyle('light');
      StatusBar.setStatusBarTranslucent(true);
      
      isImmersiveActive.current = true;
      console.log('‚úÖ Immersive mode activated');
    } catch (error) {
      console.warn('‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ immersive —Ä–µ–∂–∏–º–∞:', error);
      
      // Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π Android
      try {
        await NavigationBar.setVisibilityAsync('hidden');
        await NavigationBar.setBehaviorAsync('overlay-swipe');
      } catch (fallbackError) {
        console.warn('‚ùå Fallback —Ç–∞–∫–∂–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª:', fallbackError);
      }
    }
  }, []);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è immersive —Ä–µ–∂–∏–º–∞
  const disableImmersiveMode = useCallback(async () => {
    if (Platform.OS !== 'android') return;

    try {
      await SystemNavigationBar.navigationShow();
      await NavigationBar.setVisibilityAsync('visible');
      isImmersiveActive.current = false;
      console.log('‚úÖ Immersive mode deactivated');
    } catch (error) {
      console.warn('‚ùå –û—à–∏–±–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ immersive —Ä–µ–∂–∏–º–∞:', error);
    }
  }, []);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ä–µ–∂–∏–º–∞ (–ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∏–∑ —Ñ–æ–Ω–∞)
  const reactivateImmersiveMode = useCallback(() => {
    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
    setTimeout(enableImmersiveMode, 100);
  }, [enableImmersiveMode]);

  useEffect(() => {
    // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º immersive —Ä–µ–∂–∏–º –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    enableImmersiveMode();

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    const handleAppStateChange = (nextAppState: AppStateStatus) => {
      console.log('üì± App state changed:', appState.current, '->', nextAppState);
      
      if (appState.current.match(/inactive|background/) && nextAppState === 'active') {
        // –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤–µ—Ä–Ω—É–ª–æ—Å—å –∏–∑ —Ñ–æ–Ω–∞ - –ø–µ—Ä–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º immersive —Ä–µ–∂–∏–º
        reactivateImmersiveMode();
      }
      
      appState.current = nextAppState;
    };

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –≤—ã—Ö–æ–¥–∞ –∏–∑ immersive —Ä–µ–∂–∏–º–∞
    const handleBackPress = () => {
      if (isImmersiveActive.current) {
        // –ï—Å–ª–∏ immersive —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–µ–Ω, –ø–µ—Ä–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –µ–≥–æ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è "–ù–∞–∑–∞–¥"
        setTimeout(enableImmersiveMode, 50);
      }
      return false; // –ü–æ–∑–≤–æ–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
    };

    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è
    const appStateSubscription = AppState.addEventListener('change', handleAppStateChange);
    const backHandler = BackHandler.addEventListener('hardwareBackPress', handleBackPress);

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä–≤–∞–ª (–¥–ª—è –æ—Å–æ–±–æ —É–ø—Ä—è–º—ã—Ö —Å–ª—É—á–∞–µ–≤)
    const interval = setInterval(() => {
      if (appState.current === 'active' && !isImmersiveActive.current) {
        enableImmersiveMode();
      }
    }, 3000);

    // Cleanup —Ñ—É–Ω–∫—Ü–∏—è
    return () => {
      clearInterval(interval);
      appStateSubscription?.remove();
      backHandler?.remove();
      // –ü—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—É—é –Ω–∞–≤–∏–≥–∞—Ü–∏—é –æ–±—Ä–∞—Ç–Ω–æ
      disableImmersiveMode();
    };
  }, [enableImmersiveMode, disableImmersiveMode, reactivateImmersiveMode]);

  return {
    enableImmersiveMode,
    disableImmersiveMode,
    reactivateImmersiveMode,
    isImmersiveActive: isImmersiveActive.current
  };
};

export function useSystemBars() {
  const insets = useSafeAreaInsets();

  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –æ—Ç—Å—Ç—É–ø—ã
  return {
    top: insets.top,
    bottom: insets.bottom,
    left: insets.left,
    right: insets.right,
  };
}
