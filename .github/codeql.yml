name: "CodeQL Advanced"

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  schedule:
    # –ó–∞–ø—É—Å–∫–∞—Ç—å –∫–∞–∂–¥—ã–π –≤—Ç–æ—Ä–Ω–∏–∫ –≤ 7:18 UTC
    - cron: '18 7 * * 2'

jobs:
  analyze:
    name: Analyze (${{ matrix.language }})
    runs-on: ${{ (matrix.language == 'swift' && 'macos-latest') || 'ubuntu-latest' }}
    timeout-minutes: ${{ (matrix.language == 'swift' && 120) || 360 }}
    permissions:
      # required for all workflows
      security-events: write
      # required to fetch internal or private CodeQL packs
      packages: read
      # only required for workflows in private repositories
      actions: read
      contents: read

    strategy:
      fail-fast: false
      matrix:
        include:
        - language: javascript-typescript
          build-mode: none
        - language: python
          build-mode: none
        # –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π –µ—Å–ª–∏ –µ—Å—Ç—å Kotlin/Java –∫–æ–¥ –≤ Android —á–∞—Å—Ç–∏
        # - language: java-kotlin
        #   build-mode: autobuild

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Node.js –¥–ª—è TypeScript/JavaScript
    - name: Setup Node.js
      if: matrix.language == 'javascript-typescript'
      uses: actions/setup-node@v4
      with:
        node-version: '22.19.0'
        cache: 'npm'

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Python
    - name: Setup Python
      if: matrix.language == 'python'
      uses: actions/setup-python@v5
      with:
        python-version: '3.12.6'
        cache: 'pip'

    # Initializes the CodeQL tools for scanning
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        build-mode: ${{ matrix.build-mode }}
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞–∫–µ—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ª—É—á—à–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        queries: +security-extended,security-and-quality

    # –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è JavaScript/TypeScript
    - name: Install JavaScript dependencies (with error handling)
      if: matrix.language == 'javascript-typescript'
      run: |
        echo "üîß Setting up JavaScript environment..."
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é Node.js
        node --version
        npm --version
        
        # –û—á–∏—â–∞–µ–º npm –∫—ç—à
        npm cache clean --force
        
        # –û–±–Ω–æ–≤–ª—è–µ–º npm –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏
        npm install -g npm@latest
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º package.json
        if [ ! -f package.json ]; then
          echo "‚ùå package.json not found!"
          exit 1
        fi
        
        echo "üì¶ Found package.json, attempting to install dependencies..."
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º npm ci (–µ—Å–ª–∏ package-lock.json –≤–∞–ª–∏–¥–Ω—ã–π)
        if [ -f package-lock.json ]; then
          echo "üìã Found package-lock.json, trying npm ci..."
          if ! npm ci --no-audit --no-fund; then
            echo "‚ö†Ô∏è npm ci failed, falling back to npm install..."
            rm -f package-lock.json
            npm install --no-audit --no-fund
          fi
        else
          echo "üì¶ No package-lock.json, using npm install..."
          npm install --no-audit --no-fund
        fi
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Expo CLI (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        echo "üöÄ Installing Expo CLI..."
        npm install -g @expo/cli || echo "‚ö†Ô∏è Expo CLI installation failed, continuing..."
        
        echo "‚úÖ JavaScript dependencies installed successfully"
      continue-on-error: true

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π Python —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    - name: Install Python dependencies (with error handling)
      if: matrix.language == 'python'
      run: |
        echo "üêç Setting up Python environment..."
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é Python
        python --version
        pip --version
        
        # –û–±–Ω–æ–≤–ª—è–µ–º pip
        python -m pip install --upgrade pip setuptools wheel
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ backend –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        if [ -d "backend" ]; then
          cd backend
          echo "üìÅ Found backend directory"
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º requirements.txt
          if [ -f requirements.txt ]; then
            echo "üìã Found requirements.txt, installing dependencies..."
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            echo "üìÑ Requirements.txt contents:"
            head -10 requirements.txt
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
            pip install -r requirements.txt --timeout=100 --retries=3
          else
            echo "‚ö†Ô∏è requirements.txt not found in backend directory"
            echo "üìÇ Backend directory contents:"
            ls -la
          fi
        else
          echo "‚ö†Ô∏è Backend directory not found"
          echo "üìÇ Root directory contents:"
          ls -la
        fi
        
        echo "‚úÖ Python setup completed"
      continue-on-error: true

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è Django
    - name: Setup Django environment
      if: matrix.language == 'python'
      run: |
        if [ -d "backend" ]; then
          cd backend
          echo "üîß Setting up Django environment variables..."
          echo "SECRET_KEY=test-secret-key-for-codeql-analysis-$(date +%s)" > .env
          echo "DEBUG=False" >> .env
          echo "ALLOWED_HOSTS=localhost,127.0.0.1" >> .env
          echo "DB_ENGINE=django.db.backends.sqlite3" >> .env
          echo "DB_NAME=:memory:" >> .env
          echo "‚úÖ Django environment configured"
        fi
      continue-on-error: true

    # Manual build step (–µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è)
    - if: matrix.build-mode == 'manual'
      shell: bash
      run: |
        echo 'Manual build mode detected but not configured'
        echo 'Add your build commands here if needed'
        exit 1

    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ CodeQL –∞–Ω–∞–ª–∏–∑–∞
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –Ω–∞ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ)
    - name: Run security checks
      if: success() || failure()
      run: |
        if [ "${{ matrix.language }}" == "javascript-typescript" ]; then
          echo "üîç Running npm security audit..."
          if [ -f package.json ]; then
            npm audit --audit-level=moderate --omit=dev || echo "‚ö†Ô∏è npm audit found issues"
          fi
        elif [ "${{ matrix.language }}" == "python" ]; then
          echo "üîç Running Python security checks..."
          if [ -d "backend" ]; then
            cd backend
            pip install safety || echo "‚ö†Ô∏è Could not install safety"
            safety check --ignore=70612 || echo "‚ö†Ô∏è Safety check found issues"
          fi
        fi
      continue-on-error: true

    # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    - name: Analysis Summary
      if: always()
      run: |
        echo "=== CodeQL Analysis Summary ==="
        echo "üéØ Language: ${{ matrix.language }}"
        echo "‚úÖ CodeQL analysis completed"
        echo "üìä Results will be available in GitHub Security tab"
